/*
 * TP1 - Teléfono descompuesto
 * Title
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Signatures;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlayResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-04T15:50:09.230935-03:00[America/Argentina/Buenos_Aires]", comments = "Generator version: 7.7.0")
public class PlayResponse {
  public static final String SERIALIZED_NAME_CONTENT_RESULT = "contentResult";
  @SerializedName(SERIALIZED_NAME_CONTENT_RESULT)
  private String contentResult;

  public static final String SERIALIZED_NAME_ORIGINAL_CONTENT_TYPE = "originalContentType";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CONTENT_TYPE)
  private String originalContentType;

  public static final String SERIALIZED_NAME_ORIGINAL_LENGTH = "originalLength";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_LENGTH)
  private Integer originalLength;

  public static final String SERIALIZED_NAME_ORIGINAL_HASH = "originalHash";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_HASH)
  private String originalHash;

  public static final String SERIALIZED_NAME_RECEIVED_CONTENT_TYPE = "receivedContentType";
  @SerializedName(SERIALIZED_NAME_RECEIVED_CONTENT_TYPE)
  private String receivedContentType;

  public static final String SERIALIZED_NAME_RECEIVED_LENGTH = "receivedLength";
  @SerializedName(SERIALIZED_NAME_RECEIVED_LENGTH)
  private Integer receivedLength;

  public static final String SERIALIZED_NAME_RECEIVED_HASH = "receivedHash";
  @SerializedName(SERIALIZED_NAME_RECEIVED_HASH)
  private String receivedHash;

  public static final String SERIALIZED_NAME_SIGNATURES = "signatures";
  @SerializedName(SERIALIZED_NAME_SIGNATURES)
  private Signatures signatures;

  public PlayResponse() {
  }

  public PlayResponse contentResult(String contentResult) {
    this.contentResult = contentResult;
    return this;
  }

  /**
   * el resultado del contenido
   * @return contentResult
   */
  @javax.annotation.Nonnull
  public String getContentResult() {
    return contentResult;
  }

  public void setContentResult(String contentResult) {
    this.contentResult = contentResult;
  }


  public PlayResponse originalContentType(String originalContentType) {
    this.originalContentType = originalContentType;
    return this;
  }

  /**
   * el tipo de contenido que enviaste
   * @return originalContentType
   */
  @javax.annotation.Nonnull
  public String getOriginalContentType() {
    return originalContentType;
  }

  public void setOriginalContentType(String originalContentType) {
    this.originalContentType = originalContentType;
  }


  public PlayResponse originalLength(Integer originalLength) {
    this.originalLength = originalLength;
    return this;
  }

  /**
   * la longitud original que enviaste
   * @return originalLength
   */
  @javax.annotation.Nonnull
  public Integer getOriginalLength() {
    return originalLength;
  }

  public void setOriginalLength(Integer originalLength) {
    this.originalLength = originalLength;
  }


  public PlayResponse originalHash(String originalHash) {
    this.originalHash = originalHash;
    return this;
  }

  /**
   * el hash del mensaje original que enviaste
   * @return originalHash
   */
  @javax.annotation.Nonnull
  public String getOriginalHash() {
    return originalHash;
  }

  public void setOriginalHash(String originalHash) {
    this.originalHash = originalHash;
  }


  public PlayResponse receivedContentType(String receivedContentType) {
    this.receivedContentType = receivedContentType;
    return this;
  }

  /**
   * el tipo de contenido que volvió
   * @return receivedContentType
   */
  @javax.annotation.Nonnull
  public String getReceivedContentType() {
    return receivedContentType;
  }

  public void setReceivedContentType(String receivedContentType) {
    this.receivedContentType = receivedContentType;
  }


  public PlayResponse receivedLength(Integer receivedLength) {
    this.receivedLength = receivedLength;
    return this;
  }

  /**
   * la longitud que volvió
   * @return receivedLength
   */
  @javax.annotation.Nonnull
  public Integer getReceivedLength() {
    return receivedLength;
  }

  public void setReceivedLength(Integer receivedLength) {
    this.receivedLength = receivedLength;
  }


  public PlayResponse receivedHash(String receivedHash) {
    this.receivedHash = receivedHash;
    return this;
  }

  /**
   * el hash del mensaje que volvió
   * @return receivedHash
   */
  @javax.annotation.Nonnull
  public String getReceivedHash() {
    return receivedHash;
  }

  public void setReceivedHash(String receivedHash) {
    this.receivedHash = receivedHash;
  }


  public PlayResponse signatures(Signatures signatures) {
    this.signatures = signatures;
    return this;
  }

  /**
   * Get signatures
   * @return signatures
   */
  @javax.annotation.Nonnull
  public Signatures getSignatures() {
    return signatures;
  }

  public void setSignatures(Signatures signatures) {
    this.signatures = signatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayResponse playResponse = (PlayResponse) o;
    return Objects.equals(this.contentResult, playResponse.contentResult) &&
        Objects.equals(this.originalContentType, playResponse.originalContentType) &&
        Objects.equals(this.originalLength, playResponse.originalLength) &&
        Objects.equals(this.originalHash, playResponse.originalHash) &&
        Objects.equals(this.receivedContentType, playResponse.receivedContentType) &&
        Objects.equals(this.receivedLength, playResponse.receivedLength) &&
        Objects.equals(this.receivedHash, playResponse.receivedHash) &&
        Objects.equals(this.signatures, playResponse.signatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentResult, originalContentType, originalLength, originalHash, receivedContentType, receivedLength, receivedHash, signatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayResponse {\n");
    sb.append("    contentResult: ").append(toIndentedString(contentResult)).append("\n");
    sb.append("    originalContentType: ").append(toIndentedString(originalContentType)).append("\n");
    sb.append("    originalLength: ").append(toIndentedString(originalLength)).append("\n");
    sb.append("    originalHash: ").append(toIndentedString(originalHash)).append("\n");
    sb.append("    receivedContentType: ").append(toIndentedString(receivedContentType)).append("\n");
    sb.append("    receivedLength: ").append(toIndentedString(receivedLength)).append("\n");
    sb.append("    receivedHash: ").append(toIndentedString(receivedHash)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentResult");
    openapiFields.add("originalContentType");
    openapiFields.add("originalLength");
    openapiFields.add("originalHash");
    openapiFields.add("receivedContentType");
    openapiFields.add("receivedLength");
    openapiFields.add("receivedHash");
    openapiFields.add("signatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contentResult");
    openapiRequiredFields.add("originalContentType");
    openapiRequiredFields.add("originalLength");
    openapiRequiredFields.add("originalHash");
    openapiRequiredFields.add("receivedContentType");
    openapiRequiredFields.add("receivedLength");
    openapiRequiredFields.add("receivedHash");
    openapiRequiredFields.add("signatures");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlayResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlayResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayResponse is not found in the empty JSON string", PlayResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlayResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PlayResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("contentResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentResult").toString()));
      }
      if (!jsonObj.get("originalContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalContentType").toString()));
      }
      if (!jsonObj.get("originalHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalHash").toString()));
      }
      if (!jsonObj.get("receivedContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivedContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivedContentType").toString()));
      }
      if (!jsonObj.get("receivedHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receivedHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receivedHash").toString()));
      }
      // validate the required field `signatures`
      Signatures.validateJsonElement(jsonObj.get("signatures"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayResponse>() {
           @Override
           public void write(JsonWriter out, PlayResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlayResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlayResponse
   * @throws IOException if the JSON string is invalid with respect to PlayResponse
   */
  public static PlayResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayResponse.class);
  }

  /**
   * Convert an instance of PlayResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

