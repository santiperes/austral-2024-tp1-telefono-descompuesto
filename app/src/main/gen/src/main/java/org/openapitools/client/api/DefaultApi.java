/*
 * TP1 - Tel√©fono descompuesto
 * Title
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PlayResponse;
import org.openapitools.client.model.RegisterResponse;
import org.openapitools.client.model.Signature;
import org.openapitools.client.model.Signatures;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for registerNode
     * @param host  (optional)
     * @param port  (optional)
     * @param name  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Todo bien </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerNodeCall(String host, Integer port, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/register-node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("port", port));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerNodeValidateBeforeCall(String host, Integer port, String name, final ApiCallback _callback) throws ApiException {
        return registerNodeCall(host, port, name, _callback);

    }

    /**
     * 
     * Registra un nuevo nodo
     * @param host  (optional)
     * @param port  (optional)
     * @param name  (optional)
     * @return RegisterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Todo bien </td><td>  -  </td></tr>
     </table>
     */
    public RegisterResponse registerNode(String host, Integer port, String name) throws ApiException {
        ApiResponse<RegisterResponse> localVarResp = registerNodeWithHttpInfo(host, port, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Registra un nuevo nodo
     * @param host  (optional)
     * @param port  (optional)
     * @param name  (optional)
     * @return ApiResponse&lt;RegisterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Todo bien </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterResponse> registerNodeWithHttpInfo(String host, Integer port, String name) throws ApiException {
        okhttp3.Call localVarCall = registerNodeValidateBeforeCall(host, port, name, null);
        Type localVarReturnType = new TypeToken<RegisterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Registra un nuevo nodo
     * @param host  (optional)
     * @param port  (optional)
     * @param name  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Todo bien </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerNodeAsync(String host, Integer port, String name, final ApiCallback<RegisterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerNodeValidateBeforeCall(host, port, name, _callback);
        Type localVarReturnType = new TypeToken<RegisterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for relayMessage
     * @param message  (required)
     * @param signatures  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> mensaje recibido y reenviado. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relayMessageCall(String message, Signatures signatures, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/relay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (message != null) {
            localVarFormParams.put("message", message);
        }

        if (signatures != null) {
            localVarFormParams.put("signatures", signatures);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call relayMessageValidateBeforeCall(String message, Signatures signatures, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling relayMessage(Async)");
        }

        // verify the required parameter 'signatures' is set
        if (signatures == null) {
            throw new ApiException("Missing the required parameter 'signatures' when calling relayMessage(Async)");
        }

        return relayMessageCall(message, signatures, _callback);

    }

    /**
     * 
     * Firma un mensaje y lo manda al siguiente
     * @param message  (required)
     * @param signatures  (required)
     * @return Signature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> mensaje recibido y reenviado. </td><td>  -  </td></tr>
     </table>
     */
    public Signature relayMessage(String message, Signatures signatures) throws ApiException {
        ApiResponse<Signature> localVarResp = relayMessageWithHttpInfo(message, signatures);
        return localVarResp.getData();
    }

    /**
     * 
     * Firma un mensaje y lo manda al siguiente
     * @param message  (required)
     * @param signatures  (required)
     * @return ApiResponse&lt;Signature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> mensaje recibido y reenviado. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Signature> relayMessageWithHttpInfo(String message, Signatures signatures) throws ApiException {
        okhttp3.Call localVarCall = relayMessageValidateBeforeCall(message, signatures, null);
        Type localVarReturnType = new TypeToken<Signature>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Firma un mensaje y lo manda al siguiente
     * @param message  (required)
     * @param signatures  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> mensaje recibido y reenviado. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call relayMessageAsync(String message, Signatures signatures, final ApiCallback<Signature> _callback) throws ApiException {

        okhttp3.Call localVarCall = relayMessageValidateBeforeCall(message, signatures, _callback);
        Type localVarReturnType = new TypeToken<Signature>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessage
     * @param body El mensaje a enviar por la red telef√≥nica (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La red telef√≥nica funcion√≥ bien! </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> La red telef√≥nica fall√≥ </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageCall(String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/play";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessageValidateBeforeCall(String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling sendMessage(Async)");
        }

        return sendMessageCall(body, _callback);

    }

    /**
     * 
     * Comienza el juego!
     * @param body El mensaje a enviar por la red telef√≥nica (required)
     * @return PlayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La red telef√≥nica funcion√≥ bien! </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> La red telef√≥nica fall√≥ </td><td>  -  </td></tr>
     </table>
     */
    public PlayResponse sendMessage(String body) throws ApiException {
        ApiResponse<PlayResponse> localVarResp = sendMessageWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Comienza el juego!
     * @param body El mensaje a enviar por la red telef√≥nica (required)
     * @return ApiResponse&lt;PlayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La red telef√≥nica funcion√≥ bien! </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> La red telef√≥nica fall√≥ </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlayResponse> sendMessageWithHttpInfo(String body) throws ApiException {
        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<PlayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Comienza el juego!
     * @param body El mensaje a enviar por la red telef√≥nica (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La red telef√≥nica funcion√≥ bien! </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> La red telef√≥nica fall√≥ </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMessageAsync(String body, final ApiCallback<PlayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessageValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<PlayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
